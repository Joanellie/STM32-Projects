
stm32f103xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000034c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800047c  08000484  00001484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800047c  0800047c  00001484  2**0
                  CONTENTS
  4 .ARM          00000000  0800047c  0800047c  00001484  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800047c  08000484  00001484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800047c  0800047c  0000147c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000480  08000480  00001480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000484  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000484  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000895  00000000  00000000  000014ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002fa  00000000  00000000  00001d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00002040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000078  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000115f  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c07  00000000  00000000  000032c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000450b  00000000  00000000  00003ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000083d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001e8  00000000  00000000  0000841c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ac  00000000  00000000  00008604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000464 	.word	0x08000464

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000464 	.word	0x08000464

08000170 <GPIO_CLK_Status>:
/*******************************************
 * GPIO Function: Clock Enable/Disable
 * Arguments: 	*pGPIOx	- GPIOx PORT
 * 				status	- ENABLE or DISABLE
 ******************************************/
void GPIO_CLK_Status(GPIO_RegDef_t *pGPIOx, uint8_t status){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
	/*Check if CLK from PORTx should be set to enable*/
	if(status == ENABLE){
 800017c:	78fb      	ldrb	r3, [r7, #3]
 800017e:	2b01      	cmp	r3, #1
 8000180:	d120      	bne.n	80001c4 <GPIO_CLK_Status+0x54>
		if(pGPIOx == GPIOA){
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a23      	ldr	r2, [pc, #140]	@ (8000214 <GPIO_CLK_Status+0xa4>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d106      	bne.n	8000198 <GPIO_CLK_Status+0x28>
			GPIOA_En_CLK();
 800018a:	4b23      	ldr	r3, [pc, #140]	@ (8000218 <GPIO_CLK_Status+0xa8>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	4a22      	ldr	r2, [pc, #136]	@ (8000218 <GPIO_CLK_Status+0xa8>)
 8000190:	f043 0304 	orr.w	r3, r3, #4
 8000194:	6193      	str	r3, [r2, #24]
		}
		else if(pGPIOx == GPIOC){
			GPIOC_Dis_CLK();
		}
	}
}
 8000196:	e038      	b.n	800020a <GPIO_CLK_Status+0x9a>
		else if(pGPIOx == GPIOB){
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4a20      	ldr	r2, [pc, #128]	@ (800021c <GPIO_CLK_Status+0xac>)
 800019c:	4293      	cmp	r3, r2
 800019e:	d106      	bne.n	80001ae <GPIO_CLK_Status+0x3e>
			GPIOB_En_CLK();
 80001a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000218 <GPIO_CLK_Status+0xa8>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000218 <GPIO_CLK_Status+0xa8>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
}
 80001ac:	e02d      	b.n	800020a <GPIO_CLK_Status+0x9a>
		else if(pGPIOx == GPIOC){
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000220 <GPIO_CLK_Status+0xb0>)
 80001b2:	4293      	cmp	r3, r2
 80001b4:	d129      	bne.n	800020a <GPIO_CLK_Status+0x9a>
			GPIOC_En_CLK();
 80001b6:	4b18      	ldr	r3, [pc, #96]	@ (8000218 <GPIO_CLK_Status+0xa8>)
 80001b8:	699b      	ldr	r3, [r3, #24]
 80001ba:	4a17      	ldr	r2, [pc, #92]	@ (8000218 <GPIO_CLK_Status+0xa8>)
 80001bc:	f043 0310 	orr.w	r3, r3, #16
 80001c0:	6193      	str	r3, [r2, #24]
}
 80001c2:	e022      	b.n	800020a <GPIO_CLK_Status+0x9a>
	else if(status == DISABLE){
 80001c4:	78fb      	ldrb	r3, [r7, #3]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d11f      	bne.n	800020a <GPIO_CLK_Status+0x9a>
		if(pGPIOx == GPIOA){
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	4a11      	ldr	r2, [pc, #68]	@ (8000214 <GPIO_CLK_Status+0xa4>)
 80001ce:	4293      	cmp	r3, r2
 80001d0:	d106      	bne.n	80001e0 <GPIO_CLK_Status+0x70>
			GPIOA_Dis_CLK();
 80001d2:	4b11      	ldr	r3, [pc, #68]	@ (8000218 <GPIO_CLK_Status+0xa8>)
 80001d4:	699b      	ldr	r3, [r3, #24]
 80001d6:	4a10      	ldr	r2, [pc, #64]	@ (8000218 <GPIO_CLK_Status+0xa8>)
 80001d8:	f023 0304 	bic.w	r3, r3, #4
 80001dc:	6193      	str	r3, [r2, #24]
}
 80001de:	e014      	b.n	800020a <GPIO_CLK_Status+0x9a>
		else if(pGPIOx == GPIOB){
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4a0e      	ldr	r2, [pc, #56]	@ (800021c <GPIO_CLK_Status+0xac>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d106      	bne.n	80001f6 <GPIO_CLK_Status+0x86>
			GPIOB_Dis_CLK();
 80001e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000218 <GPIO_CLK_Status+0xa8>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000218 <GPIO_CLK_Status+0xa8>)
 80001ee:	f023 0308 	bic.w	r3, r3, #8
 80001f2:	6193      	str	r3, [r2, #24]
}
 80001f4:	e009      	b.n	800020a <GPIO_CLK_Status+0x9a>
		else if(pGPIOx == GPIOC){
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a09      	ldr	r2, [pc, #36]	@ (8000220 <GPIO_CLK_Status+0xb0>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d105      	bne.n	800020a <GPIO_CLK_Status+0x9a>
			GPIOC_Dis_CLK();
 80001fe:	4b06      	ldr	r3, [pc, #24]	@ (8000218 <GPIO_CLK_Status+0xa8>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	4a05      	ldr	r2, [pc, #20]	@ (8000218 <GPIO_CLK_Status+0xa8>)
 8000204:	f023 0310 	bic.w	r3, r3, #16
 8000208:	6193      	str	r3, [r2, #24]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	40010800 	.word	0x40010800
 8000218:	40021000 	.word	0x40021000
 800021c:	40010c00 	.word	0x40010c00
 8000220:	40011000 	.word	0x40011000

08000224 <GPIO_Setup>:
 * 		pGPIOx
 * 		GPIO_config.GPIO_Pin
 * 		GPIO_config.GPIO_CRR.GPIO_Mode
 * 		GPIO_config.GPIO_CRR.GPIO_ConfigOutput
 **********************************************/
void GPIO_Setup(GPIO_handle_t *pGPIOHandle){
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	/*Enable CLK from PORTx*/
	GPIO_CLK_Status(pGPIOHandle->pGPIOx, ENABLE);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2101      	movs	r1, #1
 8000232:	4618      	mov	r0, r3
 8000234:	f7ff ff9c 	bl	8000170 <GPIO_CLK_Status>

	uint8_t rIndx = pGPIOHandle->GPIO_config.GPIO_Pin / 8;				/*Calculate Register index from CRL/CRH: CRR[0],CRR[1] respectively*/
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	791b      	ldrb	r3, [r3, #4]
 800023c:	08db      	lsrs	r3, r3, #3
 800023e:	73fb      	strb	r3, [r7, #15]
	uint8_t bMIndx = 4*(pGPIOHandle->GPIO_config.GPIO_Pin % 8);   		/*Calculate Bit MODE from CRR register index 0 to 31*/
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	791b      	ldrb	r3, [r3, #4]
 8000244:	f003 0307 	and.w	r3, r3, #7
 8000248:	b2db      	uxtb	r3, r3
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	73bb      	strb	r3, [r7, #14]
	uint8_t bCIndx =(4*(pGPIOHandle->GPIO_config.GPIO_Pin % 8)) + 2;    /*Calculate Bit CNF from CRR register index 0 to 31*/
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	791b      	ldrb	r3, [r3, #4]
 8000252:	f003 0307 	and.w	r3, r3, #7
 8000256:	b2db      	uxtb	r3, r3
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	b2db      	uxtb	r3, r3
 800025c:	3302      	adds	r3, #2
 800025e:	737b      	strb	r3, [r7, #13]

	/*Set MODE bits from CRR*/
	pGPIOHandle->pGPIOx->CRR[rIndx] &= ~(0x03 << bMIndx);													/*Reset MODE bits*/
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	7bfa      	ldrb	r2, [r7, #15]
 8000266:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800026a:	7bbb      	ldrb	r3, [r7, #14]
 800026c:	2203      	movs	r2, #3
 800026e:	fa02 f303 	lsl.w	r3, r2, r3
 8000272:	43db      	mvns	r3, r3
 8000274:	4618      	mov	r0, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	7bfa      	ldrb	r2, [r7, #15]
 800027c:	4001      	ands	r1, r0
 800027e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIOHandle->pGPIOx->CRR[rIndx] |= (pGPIOHandle->GPIO_config.GPIO_CRR.GPIO_Mode << bMIndx);				/*Set desired MODE bits*/
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	7bfa      	ldrb	r2, [r7, #15]
 8000288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	795b      	ldrb	r3, [r3, #5]
 8000290:	461a      	mov	r2, r3
 8000292:	7bbb      	ldrb	r3, [r7, #14]
 8000294:	fa02 f303 	lsl.w	r3, r2, r3
 8000298:	4618      	mov	r0, r3
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	7bfa      	ldrb	r2, [r7, #15]
 80002a0:	4301      	orrs	r1, r0
 80002a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/*Set CNF bits from CRR*/
	pGPIOHandle->pGPIOx->CRR[rIndx] &= ~(0x03 << bCIndx);													/*Reset CNF bits*/
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	7bfa      	ldrb	r2, [r7, #15]
 80002ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80002b0:	7b7b      	ldrb	r3, [r7, #13]
 80002b2:	2203      	movs	r2, #3
 80002b4:	fa02 f303 	lsl.w	r3, r2, r3
 80002b8:	43db      	mvns	r3, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	7bfa      	ldrb	r2, [r7, #15]
 80002c2:	4001      	ands	r1, r0
 80002c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	/*Check if PIN Direction is set as INPUT or OUTPUT*/
	if(pGPIOHandle->GPIO_config.GPIO_CRR.GPIO_Mode == GPIO_INPUT_MODE){
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	795b      	ldrb	r3, [r3, #5]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d112      	bne.n	80002f6 <GPIO_Setup+0xd2>
		pGPIOHandle->pGPIOx->CRR[rIndx] |= (pGPIOHandle->GPIO_config.GPIO_CRR.GPIO_ConfigInput << bCIndx);	/*Set desired CNF bits*/
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	7bfa      	ldrb	r2, [r7, #15]
 80002d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	799b      	ldrb	r3, [r3, #6]
 80002de:	461a      	mov	r2, r3
 80002e0:	7b7b      	ldrb	r3, [r7, #13]
 80002e2:	fa02 f303 	lsl.w	r3, r2, r3
 80002e6:	4618      	mov	r0, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	7bfa      	ldrb	r2, [r7, #15]
 80002ee:	4301      	orrs	r1, r0
 80002f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}else{
		pGPIOHandle->pGPIOx->CRR[rIndx] |= (pGPIOHandle->GPIO_config.GPIO_CRR.GPIO_ConfigOutput << bCIndx);	/*Set desired CNF bits*/
	}
}
 80002f4:	e011      	b.n	800031a <GPIO_Setup+0xf6>
		pGPIOHandle->pGPIOx->CRR[rIndx] |= (pGPIOHandle->GPIO_config.GPIO_CRR.GPIO_ConfigOutput << bCIndx);	/*Set desired CNF bits*/
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	7bfa      	ldrb	r2, [r7, #15]
 80002fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	79db      	ldrb	r3, [r3, #7]
 8000304:	461a      	mov	r2, r3
 8000306:	7b7b      	ldrb	r3, [r7, #13]
 8000308:	fa02 f303 	lsl.w	r3, r2, r3
 800030c:	4618      	mov	r0, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	7bfa      	ldrb	r2, [r7, #15]
 8000314:	4301      	orrs	r1, r0
 8000316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <GPIO_TogglePin>:
/********************************************
 * GPIO Function: Toggle pin from GPIOx port
 * Arguments: 	*pGPIOx	- GPIOx PORT
 * 				 pin	- 0 to 15
 *******************************************/
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, GPIO_Pin_t pin){
 8000322:	b480      	push	{r7}
 8000324:	b083      	sub	sp, #12
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
 800032a:	460b      	mov	r3, r1
 800032c:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pin);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	68db      	ldr	r3, [r3, #12]
 8000332:	78fa      	ldrb	r2, [r7, #3]
 8000334:	2101      	movs	r1, #1
 8000336:	fa01 f202 	lsl.w	r2, r1, r2
 800033a:	405a      	eors	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	60da      	str	r2, [r3, #12]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
	...

0800034c <main>:
void GPIO_BLINK_LED_init();

GPIO_handle_t LED;

int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	GPIO_BLINK_LED_init();
 8000350:	f000 f822 	bl	8000398 <GPIO_BLINK_LED_init>
    /* Loop forever */
	while(1){
		GPIO_TogglePin(LED.pGPIOx, GPIO_PIN_13);
 8000354:	4b05      	ldr	r3, [pc, #20]	@ (800036c <main+0x20>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	210d      	movs	r1, #13
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ffe1 	bl	8000322 <GPIO_TogglePin>
		delay(500000);
 8000360:	4803      	ldr	r0, [pc, #12]	@ (8000370 <main+0x24>)
 8000362:	f000 f807 	bl	8000374 <delay>
		GPIO_TogglePin(LED.pGPIOx, GPIO_PIN_13);
 8000366:	bf00      	nop
 8000368:	e7f4      	b.n	8000354 <main+0x8>
 800036a:	bf00      	nop
 800036c:	2000001c 	.word	0x2000001c
 8000370:	0007a120 	.word	0x0007a120

08000374 <delay>:
	}
}

void delay(uint32_t time){
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	while(time){
 800037c:	e002      	b.n	8000384 <delay+0x10>
		time --;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	3b01      	subs	r3, #1
 8000382:	607b      	str	r3, [r7, #4]
	while(time){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d1f9      	bne.n	800037e <delay+0xa>
	}
}
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
	...

08000398 <GPIO_BLINK_LED_init>:

void GPIO_BLINK_LED_init(){
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	LED.pGPIOx = GPIOC;
 800039c:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <GPIO_BLINK_LED_init+0x28>)
 800039e:	4a09      	ldr	r2, [pc, #36]	@ (80003c4 <GPIO_BLINK_LED_init+0x2c>)
 80003a0:	601a      	str	r2, [r3, #0]
	LED.GPIO_config.GPIO_Pin = GPIO_PIN_13;
 80003a2:	4b07      	ldr	r3, [pc, #28]	@ (80003c0 <GPIO_BLINK_LED_init+0x28>)
 80003a4:	220d      	movs	r2, #13
 80003a6:	711a      	strb	r2, [r3, #4]
	LED.GPIO_config.GPIO_CRR.GPIO_Mode = GPIO_OUTPUT_MODE_2MHZ;
 80003a8:	4b05      	ldr	r3, [pc, #20]	@ (80003c0 <GPIO_BLINK_LED_init+0x28>)
 80003aa:	2202      	movs	r2, #2
 80003ac:	715a      	strb	r2, [r3, #5]
	LED.GPIO_config.GPIO_CRR.GPIO_ConfigOutput = GPIO_GP_OPEN_DRAIN;
 80003ae:	4b04      	ldr	r3, [pc, #16]	@ (80003c0 <GPIO_BLINK_LED_init+0x28>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	71da      	strb	r2, [r3, #7]

	GPIO_Setup(&LED);
 80003b4:	4802      	ldr	r0, [pc, #8]	@ (80003c0 <GPIO_BLINK_LED_init+0x28>)
 80003b6:	f7ff ff35 	bl	8000224 <GPIO_Setup>
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	2000001c 	.word	0x2000001c
 80003c4:	40011000 	.word	0x40011000

080003c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c8:	480d      	ldr	r0, [pc, #52]	@ (8000400 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d0:	480c      	ldr	r0, [pc, #48]	@ (8000404 <LoopForever+0x6>)
  ldr r1, =_edata
 80003d2:	490d      	ldr	r1, [pc, #52]	@ (8000408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d4:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <LoopForever+0xe>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d8:	e002      	b.n	80003e0 <LoopCopyDataInit>

080003da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003de:	3304      	adds	r3, #4

080003e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e4:	d3f9      	bcc.n	80003da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000414 <LoopForever+0x16>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ec:	e001      	b.n	80003f2 <LoopFillZerobss>

080003ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f0:	3204      	adds	r2, #4

080003f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f4:	d3fb      	bcc.n	80003ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f6:	f000 f811 	bl	800041c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fa:	f7ff ffa7 	bl	800034c <main>

080003fe <LoopForever>:

LoopForever:
  b LoopForever
 80003fe:	e7fe      	b.n	80003fe <LoopForever>
  ldr   r0, =_estack
 8000400:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000408:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800040c:	08000484 	.word	0x08000484
  ldr r2, =_sbss
 8000410:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000414:	20000024 	.word	0x20000024

08000418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000418:	e7fe      	b.n	8000418 <ADC1_2_IRQHandler>
	...

0800041c <__libc_init_array>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	2600      	movs	r6, #0
 8000420:	4d0c      	ldr	r5, [pc, #48]	@ (8000454 <__libc_init_array+0x38>)
 8000422:	4c0d      	ldr	r4, [pc, #52]	@ (8000458 <__libc_init_array+0x3c>)
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	10a4      	asrs	r4, r4, #2
 8000428:	42a6      	cmp	r6, r4
 800042a:	d109      	bne.n	8000440 <__libc_init_array+0x24>
 800042c:	f000 f81a 	bl	8000464 <_init>
 8000430:	2600      	movs	r6, #0
 8000432:	4d0a      	ldr	r5, [pc, #40]	@ (800045c <__libc_init_array+0x40>)
 8000434:	4c0a      	ldr	r4, [pc, #40]	@ (8000460 <__libc_init_array+0x44>)
 8000436:	1b64      	subs	r4, r4, r5
 8000438:	10a4      	asrs	r4, r4, #2
 800043a:	42a6      	cmp	r6, r4
 800043c:	d105      	bne.n	800044a <__libc_init_array+0x2e>
 800043e:	bd70      	pop	{r4, r5, r6, pc}
 8000440:	f855 3b04 	ldr.w	r3, [r5], #4
 8000444:	4798      	blx	r3
 8000446:	3601      	adds	r6, #1
 8000448:	e7ee      	b.n	8000428 <__libc_init_array+0xc>
 800044a:	f855 3b04 	ldr.w	r3, [r5], #4
 800044e:	4798      	blx	r3
 8000450:	3601      	adds	r6, #1
 8000452:	e7f2      	b.n	800043a <__libc_init_array+0x1e>
 8000454:	0800047c 	.word	0x0800047c
 8000458:	0800047c 	.word	0x0800047c
 800045c:	0800047c 	.word	0x0800047c
 8000460:	08000480 	.word	0x08000480

08000464 <_init>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr

08000470 <_fini>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr
