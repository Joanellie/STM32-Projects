#include "stm32f103xx_gpio.h"
#include "stm32f103xx.h"

/*******************************************
 * GPIO Function: Clock Enable/Disable
 * Arguments: 	*pGPIOx	- GPIOx
 * 				status	- ENABLE or DISABLE
 ******************************************/
void GPIO_CLK_Status(GPIO_handle_t *pGPIOHandle, uint8_t status){
	if(status == ENABLE){
		if(pGPIOHandle->pGPIOx == GPIOA){
			GPIOA_En_CLK();
		}
		else if(pGPIOHandle->pGPIOx == GPIOB){
			GPIOB_En_CLK();
		}
		else if(pGPIOHandle->pGPIOx == GPIOC){
			GPIOC_En_CLK();
		}
	}
	else if(status == DISABLE){
		if(pGPIOHandle->pGPIOx == GPIOA){
			GPIOA_Dis_CLK();
		}
		else if(pGPIOHandle->pGPIOx == GPIOB){
			GPIOB_Dis_CLK();
		}
		else if(pGPIOHandle->pGPIOx == GPIOC){
			GPIOC_Dis_CLK();
		}
	}
}
void GPIO_Init(GPIO_handle_t *pGPIOHandle){
	GPIO_CLK_Status(pGPIOHandle->pGPIOx, ENABLE);

	uint8_t rIndx = pGPIOHandle->GPIO_config.GPIO_Pin / 8;				/*Register index CRR[0] or CRR[1]*/
	uint8_t bMIndx = 4*(pGPIOHandle->GPIO_config.GPIO_Pin % 8);   		/*Bit MODE register index 0 to 31*/
	uint8_t bCIndx =(4*(pGPIOHandle->GPIO_config.GPIO_Pin % 8)) + 2;    /*Bit CNF register index 0 to 31*/

	/*MODE*/
	pGPIOHandle->pGPIOx->CRR[rIndx] &= (0x00 << bMIndx);
	pGPIOHandle->pGPIOx->CRR[rIndx] |= (pGPIOHandle->GPIO_config->pGPIO_CRR->GPIO_Mode << bMIndx);

	/*CNF*/
	pGPIOHandle->pGPIOx->CRR[rIndx] &= (0x00 << rCNFPos);
	if(pGPIOHandle->GPIO_config->pGPIO_CRR->GPIO_Mode == GPIO_INPUT_MODE){
		pGPIOHandle->pGPIOx->CRR[rIndx] |= (pGPIOHandle->GPIO_config->pGPIO_CRR->GPIO_ConfigInput << bCIndx);
	}else{
		pGPIOHandle->pGPIOx->CRR[rIndx] |= (pGPIOHandle->GPIO_config->pGPIO_CRR->GPIO_ConfigOutput << bCIndx);
	}
}
/*******************************************
 * GPIO Function: Reset GPIOx Port
 * Arguments: 	*pGPIOx	- GPIOx
 ******************************************/
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx){
	if(pGPIOx == GPIOA){
		GPIOA_RESET();
	}
	else if(pGPIOx == GPIOB){
		GPIOB_RESET();
	}
	else if(pGPIOx == GPIOC){
		GPIOC_RESET();
	}
}
/*******************************************
 * GPIO Function: Read Pin from GPIOx port
 * Arguments: 	*pGPIOx	- GPIOx
 * 				 pin	- 0 to 15
 ******************************************/
uint8_t GPIO_ReadPin(GPIO_RegDef_t *pGPIOx, GPIO_Pin_t pin){
	return (uint8_t)(((pGPIOx -> IDR) >> pin) & 0x01);
}
/*******************************************
 * GPIO Function: Read GPIOx port
 * Arguments: 	*pGPIOx	- GPIOx
 ******************************************/
uint16_t GPIO_ReadPort(GPIO_RegDef_t *pGPIOx){
	return (uint16_t)((pGPIOx -> IDR) & 0xFFFF);
}
/*******************************************
 * GPIO Function: Write pin for GPIOx port
 * Arguments: 	*pGPIOx	- GPIOx
 * 				 pin	- 0 to 15
 * 				 value	- SET or RESET
 ******************************************/
void GPIO_WritePin(GPIO_RegDef_t *pGPIOx, GPIO_Pin_t pin, uint8_t value){
	if(value == SET){
		pGPIOx -> ODR |= (value << pin);
	}
	else if(value == RESET){
		pGPIOx -> ODR &= (value << pin);
	}
}
/*******************************************
 * GPIO Function: Write whole GPIOx port
 * Arguments: 	*pGPIOx	- GPIOx
 * 				 value	- 0bxxxx xxxx
 ******************************************/
void GPIO_WritePort(GPIO_RegDef_t *pGPIOx, uint16_t value){
	pGPIOx -> ODR = (uint32_t)value;
}
/********************************************
 * GPIO Function: Toggle pin from GPIOx port
 * Arguments: 	*pGPIOx	- GPIOx
 * 				 pin	- 0 to 15
 *******************************************/
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, GPIO_Pin_t pin){
	pGPIOx -> ODR ^= (1 << pin);
}
